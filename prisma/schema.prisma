// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator json {
  provider = "prisma-json-types-generator"
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_PICKUP
  PENDING_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  LOGIN
  DISABLE_2FA
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Language {
  id          String       @unique
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  @@index([deletedAt])

  // Relations
  createdBy   User?    @relation("LanguageCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?    @relation("LanguageUpdatedBy", fields: [updatedById], references: [id])
  createdById Int?
  updatedById Int?

  // Related translations
  userTranslations     UserTranslation[]
  productTranslations  ProductTranslation[]
  categoryTranslations CategoryTranslation[]
  brandTranslations    BrandTranslation[]
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   
  name         String
  password     String
  phoneNumber  String
  avatar       String?
  totpSecret   String?
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  @@index([deletedAt])

  // Relations
  role         Role     @relation(fields: [roleId], references: [id])
  roleId       Int
  createdBy    User?    @relation("UserCreatedBy", fields: [createdById], references: [id])
  updatedBy    User?    @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  createdById  Int?
  updatedById  Int?

  // Related data
  userTranslations     UserTranslation[]
  products            Product[]         @relation("ProductCreatedBy")
  categories          Category[]        @relation("CategoryCreatedBy")
  skus                SKU[]             @relation("SKUCreatedBy")
  brands              Brand[]           @relation("BrandCreatedBy")
  cartItems           CartItem[]
  orders              Order[]
  reviews             Review[]
  messagesSent        Message[]         @relation("MessagesSent")
  messagesReceived    Message[]         @relation("MessagesReceived")
  refreshTokens       RefreshToken[]
  devices             Device[]

  // Self-referential relations
  createdUsers        User[]            @relation("UserCreatedBy")
  updatedUsers        User[]            @relation("UserUpdatedBy")
  createdLanguages    Language[]        @relation("LanguageCreatedBy")
  updatedLanguages    Language[]        @relation("LanguageUpdatedBy")

  // Additional relations
  createdUserTranslations     UserTranslation[]     @relation("UserTranslationCreatedBy")
  updatedUserTranslations     UserTranslation[]     @relation("UserTranslationUpdatedBy")
  createdPermissions          Permission[]          @relation("PermissionCreatedBy")
  updatedPermissions          Permission[]          @relation("PermissionUpdatedBy")
  createdRoles               Role[]                @relation("RoleCreatedBy")
  updatedRoles               Role[]                @relation("RoleUpdatedBy")
  updatedProducts            Product[]             @relation("ProductUpdatedBy")
  createdProductTranslations  ProductTranslation[]  @relation("ProductTranslationCreatedBy")
  updatedProductTranslations  ProductTranslation[]  @relation("ProductTranslationUpdatedBy")
  updatedCategories          Category[]            @relation("CategoryUpdatedBy")
  createdCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationCreatedBy")
  updatedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationUpdatedBy")
  updatedSKUs                SKU[]                 @relation("SKUUpdatedBy")
  updatedBrands              Brand[]               @relation("BrandUpdatedBy")
  createdBrandTranslations   BrandTranslation[]    @relation("BrandTranslationCreatedBy")
  updatedBrandTranslations   BrandTranslation[]    @relation("BrandTranslationUpdatedBy")
  createdOrders              Order[]               @relation("OrderCreatedBy")
  updatedOrders              Order[]               @relation("OrderUpdatedBy")
  soldOrders                Order[]               @relation("Shop")
  webSockets                Websocket[]
}

model UserTranslation {
  id          Int      @id @default(autoincrement())
  address     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@index([deletedAt])

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  language    Language @relation(fields: [languageId], references: [id])
  languageId  String
  createdBy   User?    @relation("UserTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?    @relation("UserTranslationUpdatedBy", fields: [updatedById], references: [id])
  createdById Int?
  updatedById Int?
}

model VerificationCode {
  id        Int                 @id @default(autoincrement())
  email     String 
  code      String
  type      VerificationCodeType
  expiresAt DateTime
  createdAt DateTime            @default(now())

  // Relations
  

  @@unique([email, code, type])
  @@index([expiresAt])
}

model RefreshToken {
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [id])
  deviceId  Int

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@index([expiresAt])
}

model Device {
  id        Int      @id @default(autoincrement())
  userId      Int
  user      User     @relation(fields: [userId], references: [id])
  userAgent String
  ip String
  lastActiveAt DateTime @updatedAt
  createdAt DateTime @default(now())
  isActive Boolean @default(true)
  refreshTokens RefreshToken[]
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  path        String
  method      HTTPMethod
  module      String @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([deletedAt])

  // Relations
  createdBy   User?     @relation("PermissionCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?     @relation("PermissionUpdatedBy", fields: [updatedById], references: [id])
  createdById Int?
  updatedById Int?

  // Many-to-many relations
  roles       Role[]    @relation("PermissionsRoles")
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    
  description String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([deletedAt])

  // Relations
  createdBy   User?     @relation("RoleCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?     @relation("RoleUpdatedBy", fields: [updatedById], references: [id])
  createdById Int?
  updatedById Int?

  // Related data
  users       User[]
  permissions Permission[] @relation("PermissionsRoles")
}

model Product {
  id           Int       @id @default(autoincrement())
  publishAt    DateTime?
  name         String
  basePrice   Float
  virtualPrice Float
  images       String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@index([deletedAt])

  // Relations
  brand        Brand     @relation(fields: [brandId], references: [id])
  brandId      Int
  createdBy    User     @relation("ProductCreatedBy", fields: [createdById], references: [id] , onDelete: Cascade)
  updatedBy    User?     @relation("ProductUpdatedBy", fields: [updatedById], references: [id])
  createdById  Int
  updatedById  Int?

  // Related data
  translations ProductTranslation[]
  skus         SKU[]
  reviews      Review[]
  /// [Variants]
  variants     Json
  categories   Category[] @relation("ProductsCategories")
  orders       Order[] 
  productSKUSnapshots    ProductSKUSnapshot[]
}

model ProductTranslation {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@index([deletedAt])

  // Relations
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  language    Language @relation(fields: [languageId], references: [id])
  languageId  String
  createdBy   User?    @relation("ProductTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?    @relation("ProductTranslationUpdatedBy", fields: [updatedById], references: [id])
  createdById Int?
  updatedById Int?

  @@index([productId])
}

model Category {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  name             String
  logo             String?

  @@index([deletedAt])

  // Relations
  parentCategory   Category? @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?
  createdBy        User?     @relation("CategoryCreatedBy", fields: [createdById], references: [id])
  updatedBy        User?     @relation("CategoryUpdatedBy", fields: [updatedById], references: [id])
  createdById      Int?
  updatedById      Int?

  // Related data
  translations     CategoryTranslation[]
  products         Product[] @relation("ProductsCategories")
  subCategories    Category[] @relation("CategoryHierarchy")
}

model CategoryTranslation {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@index([deletedAt])

  // Relations
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  language    Language @relation(fields: [languageId], references: [id])
  languageId  String
  createdBy   User?    @relation("CategoryTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?    @relation("CategoryTranslationUpdatedBy", fields: [updatedById], references: [id])
  createdById Int?
  updatedById Int?
}

model SKU {
  id          Int       @id @default(autoincrement())
  value       String
  price       Float
  stock       Int
  image      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([deletedAt])
  @@index([productId])

  // Relations
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  createdBy   User     @relation("SKUCreatedBy", fields: [createdById], references: [id] , onDelete: Cascade)
  updatedBy   User?     @relation("SKUUpdatedBy", fields: [updatedById], references: [id])
  createdById Int
  updatedById Int?

  // Related data
  cartItems   CartItem[]
  snapshots   ProductSKUSnapshot[]
}

model Brand {
  id          Int       @id @default(autoincrement())
  logo        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  name        String

  @@index([deletedAt])

  // Relations
  createdBy   User?     @relation("BrandCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?     @relation("BrandUpdatedBy", fields: [updatedById], references: [id])
  createdById Int?
  updatedById Int?

  // Related data
  products    Product[]
  translations BrandTranslation[]
}

model BrandTranslation {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@index([deletedAt])

  // Relations
  brand       Brand    @relation(fields: [brandId], references: [id])
  brandId     Int
  language    Language @relation(fields: [languageId], references: [id])
  languageId  String
  createdBy   User?    @relation("BrandTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?    @relation("BrandTranslationUpdatedBy", fields: [updatedById], references: [id])
  createdById Int?
  updatedById Int?

}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sku       SKU      @relation(fields: [skuId], references: [id], onDelete: Cascade)
  skuId     Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([userId])
  @@unique([userId, skuId])
}

model ProductSKUSnapshot {
  id          Int      @id @default(autoincrement())
  productName String
  skuPrice       Float
  image      String
  skuValue    String
  createdAt   DateTime @default(now())

  // Relations
  sku         SKU      @relation(fields: [skuId], references: [id])
  skuId       Int
  order       Order    @relation(fields: [orderId], references: [id] , onDelete: Cascade)
  orderId     Int
  quantity    Int
  productId   Int?
  product     Product?  @relation(fields: [productId], references: [id] , onDelete: SetNull,onUpdate: NoAction)

  ///[ProductTranslation]
  productTranslation Json
}

model Order {
  id          Int         @id @default(autoincrement())
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?

  ///[Receiver]
  receiver    Json
  shopId      Int?
  shop        User?      @relation("Shop", fields: [shopId], references: [id] , onDelete: SetNull,onUpdate: NoAction)
 

  @@index([deletedAt])

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  createdBy   User?       @relation("OrderCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?       @relation("OrderUpdatedBy", fields: [updatedById], references: [id])
  createdById Int?
  updatedById Int?
  paymentId   Int
  payment     Payment     @relation( fields: [paymentId], references: [id] , onDelete: NoAction,onUpdate: NoAction)

  // Related data
  snapshots   ProductSKUSnapshot[]
  products    Product[]

  @@index([status,deletedAt])
}

model Payment{
  id Int @id @default(autoincrement())
  status PaymentStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order Order[] 
}

model Review {
  id          Int      @id @default(autoincrement())
  content     String
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@index([deletedAt])

  // Relations
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
}

model PaymentTransaction {
  id                Int      @id @default(autoincrement())
  gateway           String
  transactionDate   DateTime @default(now())
  accountNumber     String?
  subAccount        String?
  amountIn          Int      @default(0)
  amountOut         Int      @default(0)
  accumulated       Int      @default(0)
  code              String?
  transactionContent String?
  referenceNumber   String?
  body              String?
  createdAt         DateTime @default(now())
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  readAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  fromUser  User     @relation("MessagesSent", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser    User     @relation("MessagesReceived", fields: [toUserId], references: [id])
  toUserId  Int
}

model Websocket {
  id String @id
  userId Int
  user User     @relation( fields: [userId], references: [id],onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
}

